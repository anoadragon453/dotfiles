#+TITLE: Wil's Emacs config
#+STARTUP: content
#+STARTUP: inlineimages
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el

* Introduction
  This file contains all of my emacs configuration which is then tangled out into an init file.

  This is not broken out into a flake yet because its very much an inprogress configuraiton.

  To tangle config C-c C-v t.
* Settings

** Editor Settings
   #+begin_src emacs-lisp
     (setq default-tab-width 2)
     (setq tab-width 2)
     (setq custom-tab-width 2)
     (setq-default electric-indent-inhibit t)
     (setq-default evil-shift-width custom-tab-width)
   #+end_src
   
** Startup Perfomance
  #+begin_src emacs-lisp
    ;; The default is 800 kilobytes.  Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))

    (defun efs/display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collections."
	       (format "%.2f seconds"
		       (float-time
			(time-subtract after-init-time before-init-time)))
	       gcs-done))

    (add-hook 'emacs-startup-hook #'efs/display-startup-time)
  #+end_src

** Move emacs directory to ./config/emacs
   My nix config has moved the emacs folder to *~/.config/emacs* so we need to set this at the top of the file for everything to work properly.
   
   #+begin_src emacs-lisp
     (setq user-emacs-directory "~/.config/emacs/")
   #+end_src

** Remove Default Startup Screen and menus
   #+begin_src emacs-lisp
     ; Get rid of startup message
     (setq inhibit-startup-message t)

     ; Get rid of ugly window chrome
     (scroll-bar-mode -1)
     (tool-bar-mode -1)
     (tooltip-mode -1)
     (set-fringe-mode 10) ; Some extra room around window
     (menu-bar-mode -1)
   #+end_src

** Setup Use Package
   #+begin_src emacs-lisp
     (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
     ; Enabling packages
     (require 'package)
     (setq package-archives '(("melpa" . "http://melpa.org/packages/")
			       ("org" . "http://orgmode.org/elpa/")
			       ("elpa" . "http://elpa.gnu.org/packages/")))

     ;; Make sure there is a package list on first open
     (package-initialize)
     (unless package-archive-contents
       (package-refresh-contents))

       ;; Initialize use-package
       (unless (package-installed-p 'use-package)
	 (package-install 'use-package))

      (require 'use-package)
       (setq use-package-always-ensure t) ;;Auto download
   #+end_src

   #+RESULTS:
   : t

** Theme Setup
   #+begin_src emacs-lisp
     ;;doom themes
     (use-package doom-themes
       :config
       (setq doom-themes-enable-bold t
	     doom-themes-enable-italic t)
       (load-theme 'doom-one t))
     (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 140)
     ; All emacs icons
     (use-package all-the-icons)

     (set-frame-font "FiraCode Nerd Font Mono" t t)
   #+end_src

** Ivy

   #+begin_src emacs-lisp
	 ;; Ivy setup
	 (use-package ivy
	     :diminish ; Prevents this from showing in the mode line.
	     :bind (("C-s" . swiper)
		 :map ivy-minibuffer-map
		 ("TAB" . ivy-alt-done)
		 ("C-l" . ivy-alt-done)
		 ("C-j" . ivy-next-line)
		 ("C-l" . ivy-previous-line)
		 :map ivy-switch-buffer-map
		 ("C-k" . ivy-previous-line)
		 ("C-l" . ivy-done)
		 ("C-d" . ivy-swtich-buffer-kill)
		 :map ivy-reverse-i-search-map
		 ("C-k" . ivy-previous-line)
		 ("C-d" . ivy-reverse-i-search-kill))
	     :config
	     (ivy-mode 1))

	     ;; Ivy-Rich - Gives details of commands when you complete with ivy.
	     (use-package ivy-rich
		 :init
		 (ivy-rich-mode 1))
   #+end_src

** Counsel
   #+begin_src emacs-lisp
     (use-package counsel
       :bind (("M-x" . counsel-M-x)
	      ("C-x b" . counsel-ibuffer)
	      ("C-x C-f" . counsel-find-file)
	      :map minibuffer-local-map
	      ("C-r" . 'counsel-minibuffer-history)))
   #+end_src

** Doom Emacs Line
   #+begin_src emacs-lisp
     (use-package doom-modeline
       :ensure t
       :init (doom-modeline-mode 1)
       :custom ((doom-modeline-height 15)))
   #+end_src
 
** Evil Mode
   #+begin_src emacs-lisp
      ;; Setup line numbers

      (setq display-line-numbers-type 'relative)
      (column-number-mode)
      (global-display-line-numbers-mode t)

      ;;Make ESC quit prompts
      (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

      (use-package evil
	:init
	(setq evil-want-intergration t)
	(setq evil-want-keybinding nil)
	(setq evil-want-C-u-scroll t)

	:config
	(evil-mode 1)
	(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	(define-key evil-motion-state-map " " nil)

	;; Use visual line motions even outside of visual-line-mode buffers
	(evil-global-set-key 'motion "j" 'evil-next-visual-line)
	(evil-global-set-key 'motion "k" 'evil-previous-visual-line)

	(evil-set-initial-state 'messages-buffer-mode 'normal)
	(evil-set-initial-state 'dashboard-mode 'normal))

     (use-package evil-collection
	:after evil
	:config
	(evil-collection-init))

     (dolist (mode `(
	term-mode-hook
	eshell-mode-hook
	treemacs-mode-hook
	shell-mode-hook))

     (add-hook mode (lambda () (display-line-numbers-mode 0))))
   #+end_src

** Hydra
   #+begin_src emacs-lisp
     (use-package hydra)

     (defhydra hydra-text-scale (:timeout 4)
       "scale text"
       ("j" text-scale-increase "in")
       ("k" text-scale-decrease "out")
       ("f" nil "finished" :exit t))
   #+end_src

** Projectile
   #+begin_src emacs-lisp
     ;; Project management
     (use-package projectile
       :diminish projectile-mode
       :config (projectile-mode)
       :custom ((projectile-completion-system 'ivy))
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       (when (file-directory-p "~/repo")
	 (setq projectile-project-search-path '("~/repo")))
       (setq projectile-switch-project-action #'projectile-dired))

     (use-package counsel-projectile
       :config (counsel-projectile-mode 1))
   #+end_src

** General
   #+begin_src emacs-lisp
	 (use-package general
	     :after evil which-key
	     :config
	     (general-evil-setup t)
	     (general-create-definer wil/leader-keys
		 :states '(normal insert visual emacs)
		 :keymaps 'override
		 :prefix "SPC"
		 :global-prefix "C-SPC")

	     (general-create-definer wil/org-leader-keys
		 :states '(normal)
		 :keymaps 'org-mode-map
		 :prefix "SPC"
		 :global-prefix "C-SPC")

	     (wil/org-leader-keys
	     ;; "o" '(:ignore t :which-key "Org Mode")
	      "oa" '((lambda() (interactive) (message "test")) :which-key "Do stuff")
	      "ot" '((lambda() (interactive) (org-babel-tangle-file (buffer-file-name (current-buffer)))) :which-key "Tangle Current Buffer")
	      "ob" '((lambda() (interactive) (org-roam-buffer-toggle)) :which-key "Toggle Roam Buffer")
	      "of" '((lambda() (interactive) (org-roam-node-find)) :which-key "Find Node")
	      "oi" '((lambda() (interactive) (org-roam-insert)) :which-key "Insert Node")
	     )

	     (wil/leader-keys
	     "c"  '(:ignore t :which-key "Code")
	     "cc" '((lambda() (interactive) (comment-region)) :which-key "Toggle Comments")	 
	     "cu" '((lambda() (interactive) (uncomment-region)) :which-key "Toggle Comments")
	     "cf" '((lambda() (interactive) (lsp-format-buffer)) :which-key "Format")
	     "ca" '((lambda() (interactive) (lsp-execute-code-action)) :which-key "LSP Action")
	     "cd" '((lambda() (interactive) (lsp-ui-peek-find-definitions)) :which-key "Go to definition")
	     "ci" '((lambda() (interactive) (lsp-ui-peek-find-implementation)) :which-key "Go to implimentation")
	     "cr" '((lambda() (interactive) (lsp-rename)) :which-key "Rename Symbol")
	     "cR" '((lambda() (interactive) (lsp-ui-peek-find-references)) :which-key "Find references")
	     "ce" '((lambda() (interactive) (lsp-treemacs-errors-list)) :which-key "List errors")

	     "h"  '(:ignore t :which-key "Help")
	     "hA" '((lambda() (interactive) (about-emacs)) :which-key "About Emacs")
	     "h." '((lambda() (interactive) (display-local-help)) :which-key "Local Help")
	     "hk" '((lambda() (interactive) (describe-bindings)) :which-key "Key bindings")
	     "hp" '((lambda() (interactive) (describe-package)) :which-key "Package")
	     "ha" '((lambda() (interactive) (apropos)) :which-key "Apropos")
	     "hi" '((lambda() (interactive) (info)) :which-key "Info")

	     "g"  '(:ignore t :which-key "Git")
	     "gs" '((lambda() (interactive) (magit)) :which-key "Git status")

	     "o"  '(:ignore t :which-key "Org")

	     "d"  '(:ignore t :which-key "Debug")
	     "ds" '((lambda() (interactive) (message "Step in")) :which-key "Step In")
	     "do" '((lambda() (interactive) (message "Step Over")) :which-key "Step Over")
	     "db" '((lambda() (interactive) (message "Toggle Breakpoint")) :which-key "Toggle breakpoint")
	     "dc" '((lambda() (interactive) (message "Continue Debugger")) :which-key "Continue debugger")

	     "p"  '(:ignore t :which-key "Project")
	     "po" '((lambda() (interactive) (projectile-switch-project)) :which-key "Open Project")
	     "pf" '((lambda() (interactive) (projectile-find-file)) :which-key "Find file in project")
	     "pg" '((lambda() (interactive) (projectile-grep)) :which-key "Grep in project")

	     "w"  '(:ignore t :which-key "Window")
	     "wh" '((lambda() (interactive) (windmove-left))  :which-key "Window - Left")
	     "wj" '((lambda() (interactive) (windmove-down))  :which-key "Window - Down")
	     "wk" '((lambda() (interactive) (windmove-up))    :which-key "Window - Up")
	     "wl" '((lambda() (interactive) (windmove-right)) :which-key "Window - Right")
	     "wc" '((lambda() (interactive) (delete-window)) :which-key "Close Window")
	     "wsv" '((lambda() (interactive) (split-window-vertically)) :which-key "Split window vertically")
	     "wsh" '((lambda() (interactive) (split-window-horizontally)) :which-key "Split window horizontally")

	     "f"  '(:ignore t :which-key "File")
	     "fn" '((lambda() (interactive) (treemacs)) :which-key "Toggle file tree")
	     "fs" '((lambda() (interactive) (lsp-treemacs-symbols)) :which-key "Toggle symbols")

	     "b"  '(:ignore t :which-key "Buffers")
	     "bl" '((lambda() (interactive) (ivy-read "Buffer List: " (mapcar #'buffer-name (buffer-list)) 
		      :action '(1 ("s" (lambda (x) (switch-to-buffer x)) "switch")))) :which-key "Buffer List")
	     "bc" '((lambda() (interactive) (kill-current-buffer)) :which-key "Close Buffer")
	     "e"  '(:ignore t :which-key "Editor")
	     "es" '((lambda() (interactive) (find-file (expand-file-name "~/.dotfiles/emacs/emacs.org"))) :which-key "Edit Settings")
	     "ea" '((lambda() (interactive) (org-babel-tangle-file (expand-file-name "~/.dotfiles/emacs/emacs.org"))) :which-key "Apply Settings")
	     "er" '((lambda() (interactive) (load-file "~/.config/emacs/init.el")) :which-key "Reload Config"))

	     ;; Remove global keys I don't use
	    (global-unset-key (kbd "C-h C-a"))   
	    (global-unset-key (kbd "C-h C-c"))
	    (global-unset-key (kbd "C-h C-d"))
	    (global-unset-key (kbd "C-h C-e"))
	    (global-unset-key (kbd "C-h C-f"))
	    (global-unset-key (kbd "C-h C-h"))
	    (global-unset-key (kbd "C-h RET"))
	    (global-unset-key (kbd "C-h C-n"))
	    (global-unset-key (kbd "C-h C-o"))
	    (global-unset-key (kbd "C-h C-p"))
	    (global-unset-key (kbd "C-h C-s"))
	    (global-unset-key (kbd "C-h C-t"))
	    (global-unset-key (kbd "C-h C-w"))
	    (global-unset-key (kbd "C-h C-\\"))
	    (global-unset-key (kbd "C-h ."))
	    (global-unset-key (kbd "C-h 4"))
	    (global-unset-key (kbd "C-h ?"))
	    (global-unset-key (kbd "C-h C"))
	    (global-unset-key (kbd "C-h F"))
	    (global-unset-key (kbd "C-h I"))
	    (global-unset-key (kbd "C-h K"))
	    (global-unset-key (kbd "C-h L"))
	    (global-unset-key (kbd "C-h P"))
	    (global-unset-key (kbd "C-h S"))
	    (global-unset-key (kbd "C-h a"))
	    (global-unset-key (kbd "C-h b"))
	    (global-unset-key (kbd "C-h c"))
	    (global-unset-key (kbd "C-h d"))
	    (global-unset-key (kbd "C-h e"))
	    (global-unset-key (kbd "C-h f"))
	    (global-unset-key (kbd "C-h g"))
	    (global-unset-key (kbd "C-h h"))
	    (global-unset-key (kbd "C-h i"))
	    (global-unset-key (kbd "C-h k"))
	    (global-unset-key (kbd "C-h l"))
	    (global-unset-key (kbd "C-h m"))
	    (global-unset-key (kbd "C-h n"))
	    (global-unset-key (kbd "C-h o"))
	    (global-unset-key (kbd "C-h p"))
	    (global-unset-key (kbd "C-h q"))
	    (global-unset-key (kbd "C-h r"))
	    (global-unset-key (kbd "C-h s"))
	    (global-unset-key (kbd "C-h t"))
	    (global-unset-key (kbd "C-h v"))
	    (global-unset-key (kbd "C-h w"))
	    (global-unset-key (kbd "C-h <f1>"))
	    (global-unset-key (kbd "C-h <help>"))

	    (global-unset-key (kbd "ESC"))

	    (global-unset-key (kbd "C-@"))

	    (global-unset-key (kbd "C-@"))
	    (global-unset-key (kbd "C-@ s"))
	    (global-unset-key (kbd "C-@ a"))
	    (global-unset-key (kbd "C-@ c"))
	    (global-unset-key (kbd "C-@ h"))
	    (global-unset-key (kbd "C-@ m"))
	    (global-unset-key (kbd "C-@ s"))
	    (global-unset-key (kbd "C-a"))
	    (global-unset-key (kbd "C-c"))
	    ;;(global-unset-key (kbd "C-g")) - Leaving for now as it can be useful for getting out of problem areas.
	    (global-unset-key (kbd "C-h"))
	    (global-unset-key (kbd "C-j"))
	    (global-unset-key (kbd "C-k"))
	    (global-unset-key (kbd "C-l"))
	    (global-unset-key (kbd "C-q"))
	    (global-unset-key (kbd "C-s"))
	    (global-unset-key (kbd "C-x"))
	    (global-unset-key (kbd "C-\\"))
	    (global-unset-key (kbd "C-_"))
	    (global-unset-key (kbd "C--"))
	    (global-unset-key (kbd "C-/"))
	    (global-unset-key (kbd "C-S-<backspace>"))
	    (global-unset-key (kbd "C-<delete>"))
	    (global-unset-key (kbd "C-<down>"))
	    (global-unset-key (kbd "C-<end>"))
	    (global-unset-key (kbd "C-<f10>"))
	    (global-unset-key (kbd "C-<home>"))
	    (global-unset-key (kbd "C-<insert>"))
	    (global-unset-key (kbd "C-<insertchar>"))
	    (global-unset-key (kbd "M-<f10>"))
	    (global-unset-key (kbd "M-<home>"))
	    (global-unset-key (kbd "M-<end>"))
	    (global-unset-key (kbd "S-<delete>"))
	    (global-unset-key (kbd "S-<insert>"))
	    (global-unset-key (kbd "S-<insertchar>"))

	    (global-unset-key (kbd "<XF86Back>"))
	    (global-unset-key (kbd "<XF86WakeUp>"))
	    (global-unset-key (kbd "<XF86Forward>"))
	    (global-unset-key (kbd "<again>"))
	    (global-unset-key (kbd "<begin>"))
	    (global-unset-key (kbd "<copy>"))
	    (global-unset-key (kbd "<cut>"))
	    (global-unset-key (kbd "<f1>"))
	    (global-unset-key (kbd "<f2>"))
	    (global-unset-key (kbd "<f3>"))
	    (global-unset-key (kbd "<f4>"))
	    (global-unset-key (kbd "<f10>"))
	    (global-unset-key (kbd "<f11>"))
	    (global-unset-key (kbd "<f16>"))
	    (global-unset-key (kbd "<f18>"))
	    (global-unset-key (kbd "<f20>"))
	    (global-unset-key (kbd "<find>"))
	    (global-unset-key (kbd "<help>"))
	    (global-unset-key (kbd "<header-line>"))
	    (global-unset-key (kbd "<menu>"))
	    (global-unset-key (kbd "<paste>"))
	    (global-unset-key (kbd "<undo>"))
	    (global-unset-key (kbd "<redo>"))
     )

   #+end_src

** Which Key
   #+begin_src emacs-lisp
     (use-package which-key
       :init (which-key-mode)
       :diminish which-key-mode
       :config (setq which-key-idle-delay 0.3))
   #+end_src
** Helpful
   #+begin_src emacs-lisp
     ;; Helpful
     (use-package helpful
       :commands (helpful-callable helpful-variable helpful-command helpful-key)
       :custom
       (counsel-describe-function-function #'helpful-callable)
       (counsel-describe-variable-function #'helpful-variable)
       :bind
       ([remap describe-function] . counsel-describe-function)
       ([remap describe-command] . helpful-command)
       ([remap describe-variable] . counsel-describe-variable)
       ([remap describe-key] . helpful-key))
   #+end_src

** Rainbow delimiters
   #+begin_src emacs-lisp
     ;; Adding random delimiters
     (use-package rainbow-delimiters
       :hook (prog-mode . rainbow-delimiters-mode))
   #+end_src

** Magit
   #+begin_src emacs-lisp
     ;;Git intergration
     (use-package magit
       :custom
       (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
   #+end_src

** Org Mode
   #+begin_src emacs-lisp
     ;; Does intergration with github and gitlab

     (defun dw/org-mode-setup()
       (org-indent-mode)
       (org-src-tab-acts-natively t)
       (org-src-fontify-natively t)
       (variable-pitch-mode 1)
       (auto-fill-mode 0)
       (visual-line-mode 1)
       (setq evil-auto-indent nul))

     (use-package org
       ;;:hook (org-mode . dw/org-mode-setup)
       :config
       (setq org-ellipsis " "
	     org-hide-emphasis-markers nil))
     (use-package org-bullets
       :after org
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

     (dolist (face '((org-level-1 . 1.2)
		     (org-level-2 . 1.1)
		     (org-level-3 . 1.05)
		     (org-level-4 . 1.0)
		     (org-level-5 . 1.1)
		     (org-level-6 . 1.1)
		     (org-level-7 . 1.1)
		     (org-level-8 . 1.1)))
       (set-face-attribute (car face) nil :font "NotoSans Nerd Font" :weight 'regular :height (cdr face)))
   #+end_src

** Org Roam
   #+begin_src emacs-lisp
     (use-package org-roam
       :init
       (setq org-roam-v2-ack t)
       :custom
       (org-roam-directory "~/vaults/roam")
       :bind (("C-c n l" . org-roam-buffer-toggle)
	      ("C-c n f" . org-roam-node-find)
	      ("C-c n i" . org-roam-node-insert))
       :config
       (org-roam-setup))
   #+end_src
   
** Dashboard
   [[./logo.png]]
   #+begin_src emacs-lisp
     (use-package dashboard
	 :config
	 (setq dashboard-banner-logo-title "Not actually doom emacs")
	 (setq dashboard-startup-banner (expand-file-name "~/.dotfiles/emacs/logo.png"))
	 (setq dashboard-center-content t)
	 (setq dashboard-items '((recents  . 5)
			     (bookmarks . 5)
			     (projects . 5)))
	 (setq dashboard-set-navigator t)
	 (setq dashboard-navigator-buttons
	     `(
		 ((,
		 (all-the-icons-octicon "zap" :height 1.1 :v-adjust 0.0)
		 "Wil's Zettlekasten"
		 "Open Zettlekasten"
		 (lambda (&rest _)
		 (find-file "~/vaults/roam/20220130163826-index.org")))
	     
		 (,
		 (all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
		 "Wil's GitHub"
		 "Browse Github"
		 (lambda (&rest _)
		 (browse-url "https://github.com/wiltaylor/")))

		 (,
		 (all-the-icons-octicon "globe" :height 1.1 :v-adjust 0.0)
		 "Wil's Blog"
		 "Browse Blog"
		 (lambda (&rest _)
		 (browse-url "https://www.wil.dev/"))))
	     ))
     (setq dashboard-footer-messages '("Ni!"))
     (setq dashboard-footer-icon (all-the-icons-octicon "terminal"
						 :height 1.1
						 :v-adjust -0.05
						 :face 'font-lock-keyword-face))
     (dashboard-refresh-buffer)
     (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
     (dashboard-setup-startup-hook))

   #+end_src
** Treemacs
   #+begin_src emacs-lisp
      (use-package treemacs
	:defer t
	:config
	(progn
	  (setq treemacs-deferred-git-apply-delay        0.5
		treemacs-directory-name-transformer      #'identity
		treemacs-display-in-side-window          t
		treemacs-eldoc-display                   t
		treemacs-file-event-delay                5000
		treemacs-file-extension-regex            treemacs-last-period-regex-value
		treemacs-file-follow-delay               0.2
		treemacs-file-name-transformer           #'identity
		treemacs-follow-after-init               t
		treemacs-expand-after-init               t
		treemacs-git-command-pipe                ""
		treemacs-goto-tag-strategy               'refetch-index
		treemacs-indentation                     2
		treemacs-indentation-string              " "
		treemacs-is-never-other-window           nil
		treemacs-max-git-entries                 5000
		treemacs-missing-project-action          'ask
		treemacs-move-forward-on-expand          nil
		treemacs-no-png-images                   nil
		treemacs-no-delete-other-windows         t
		treemacs-project-follow-cleanup          nil
		treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
		treemacs-position                        'left
		treemacs-read-string-input               'from-child-frame
		treemacs-recenter-distance               0.1
		treemacs-recenter-after-file-follow      nil
		treemacs-recenter-after-tag-follow       nil
		treemacs-recenter-after-project-jump     'always
		treemacs-recenter-after-project-expand   'on-distance
		treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
		treemacs-show-cursor                     nil
		treemacs-show-hidden-files               t
		treemacs-silent-filewatch                nil
		treemacs-silent-refresh                  nil
		treemacs-sorting                         'alphabetic-asc
		treemacs-select-when-already-in-treemacs 'move-back
		treemacs-space-between-root-nodes        t
		treemacs-tag-follow-cleanup              t
		treemacs-tag-follow-delay                1.5
		treemacs-text-scale                      nil
		treemacs-user-mode-line-format           nil
		treemacs-user-header-line-format         nil
		treemacs-wide-toggle-width               70
		treemacs-width                           35
		treemacs-width-increment                 1
		treemacs-width-is-initially-locked       t
		treemacs-workspace-switch-cleanup        nil)

	  (treemacs-resize-icons 22)

	  (treemacs-follow-mode t)
	  (treemacs-filewatch-mode t)
	  (treemacs-fringe-indicator-mode 'always)

	  (pcase (cons (not (null (executable-find "git")))
		       (not (null treemacs-python-executable)))
	    (`(t . t)
	     (treemacs-git-mode 'deferred))
	    (`(t . _)
	     (treemacs-git-mode 'simple)))

	  (treemacs-hide-gitignored-files-mode nil)))

     ; This breaks the hot keys for leader
      ;(use-package treemacs-evil
        ;:after (treemacs evil)
        ;:config    
        ;:ensure t)

      (use-package treemacs-projectile
	:after (treemacs projectile)
	:ensure t)

      (use-package treemacs-icons-dired
	:hook (dired-mode . treemacs-icons-dired-enable-once)
	:ensure t)

      (use-package treemacs-magit
	:after (treemacs magit)
	:ensure t)
   #+end_src

** Development
*** LSP Mode
   #+begin_src emacs-lisp
     (defun wil/lsp-mode-setup ()
       (setq lsp-headerline-breadcrum-segments '(path-up-to-project file symbols))
       (setq tab-width 2)
       (lsp-headerline-breadcrumb-mode))

     (use-package spinner)
     (use-package lsp-mode
      :after spinner
      :commands (lsp lsp-deferred)
      :hook (lsp-mode . wil/lsp-mode-setup)
      :init
      (setq lsp-keymap-prefix "C-c l"))

     (use-package lsp-ui
      :hook (lsp-mode . lsp-ui-mode)
      :custom
      (lsp-ui-doc-position 'bottom))

     (use-package lsp-treemacs
       :after lsp)
   #+end_src
*** Tree Sitter
    #+begin_src emacs-lisp
      (use-package tree-sitter
	:init
	(global-tree-sitter-mode)
	:hook
        (prog-mode . tree-sitter-hl-mode)
      )
      (use-package tree-sitter-langs
	:after tree-sitter
      )
    #+end_src
*** Company Mode
    #+begin_src emacs-lisp
      (use-package company
       :after lsp-mode
       :hook (lsp-mode . company-mode)
       :bind (:map company-active-map
	      ("<tab>" . company-complete-slection))
	     (:map lsp-mode-map
	      ("<tab>" . company-indent-or-complete-common))
       :custom
       (company-minimum-prefix-length 1)
       (company-idle-delay 0.0))

      (use-package company-box
      :hook (company-mode . company-box-mode))
    #+end_src
*** Typescript
    #+begin_src emacs-lisp
      (use-package typescript-mode
       :mode "\\.ts\\'"
       :hook (typescript-mode . lsp-deferred)
       :config
       (setq typescript-indent-level 2))
    #+end_src
   
*** Go
    #+begin_src emacs-lisp
      (use-package go-mode
       :mode "\\.go\\'"
       :hook (go-mode . lsp-deferred))
    #+end_src

*** NIX
    #+begin_src emacs-lisp
    (use-package nix-mode
     :hook (nix-mode . lsp-deferred)
     :mode "\\.nix\\'")

    #+end_src
